Write a program that connects to a locally running MongoDB MongoD server and prints the result of a pipeline that processes a stream of documents through a number of stages.

You will load all the records from the 'logs_collection' MongoDump which is included in the module's data folder or you can find it on Github (see https://github.com/braz/mongodb-aggregate-adventure/blob/master/data/logs.json). 

The documents contain the fields 'host', 'referer', 'page', 'request','useragent', and 'date' formatted as follows:

{ "_id" : ObjectId("52fb7985e774d52c684eeea2"), "HOST" : "209.160.24.63", "REFERER" : "http://www.google.com", "USERAGENT" : "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.46 Safari/536.5", "PAGE" : "product.screen", "DATE" : ISODate("2014-02-03T18:22:16Z") }

In this problem you will use the aggregation framework to analysis a log file from a webserver. This will use a complex pipeline to create two queries, firstly to count all events on the website on 14th of March 2005 and secondly to drill down on these sub-set of events for a specific host (69.246.7.31) to provide counts for the day and per page / resource.

In this exercise, you will use the database '{bold}test{/bold}'
running on your localhost (127.0.0.1) in port 27017 and the collection '{bold}logs{/bold}'.

Stage 1 - Using the command line perform a MongoRestore of the collection "logs" from the MongoDump found in the module's data folder. The command you will need to use is "mongorestore --drop <PATH_TO_MODULE_DATA_FOLDER>/logs_collection" replacing PATH_TO_MODULE_DATA_FOLDER with the path and directory information for your machine.

Stage 2 - Connect to the database 'test' and create the collection 'logs'.

Stage 3 - Create an index on the fields 'host' and 'date' to improve performance, in this case will a right-aligned index which is efficient for queries with time-oriented data, particularly recent data as only a small piece is resident in RAM at any particular time. In 2.2 and 2.4, $match, $sort, $limit and $skip pipeline operators can use an index when they occur at the beginning before any of the following operators $project, $unwind, or $group.

Stage 3 - Count all the events for 3rd of February 2014 per page using the $match, $project, $group operators and return the output of this operation to the console to create a result document in the format.
{ "_id" : { "y" : 2014, "m" : 2, "d" : 3 }, "hits" : 372 }

Stage 4 - In a similar query to stage 3, count all the event for the 14th of March 2005 but limit this to the events from the host (69.246.7.3) and return the output to the console. This will return a document in a similiar format to Stage 3 likely with fewer hits as only one host results will be contained.

Your answer to the exercise will be run against the official solution to ensure
that your query returns the correctly modified document.

This exercise assumes a running MongoDB on your local machine. This means
the connection string will again be {yellow}{bold}'mongodb://127.0.0.1:27017/'{/yellow}{/bold}. You will create the database and collection you will use for this exercise as part of the exercise.

----------------------------------------------------------------------
HINTS:

Just a side note about the zero offset in the default Javascript Date() constructor for the month, so your call should use Date(2014,01,03) for February (rather than 2!).

In this exercise, you will need to use the `aggregation` framework and its operators to return the desired output. In this case you will create a pipeline using a match on the time field and then apply the project operator  on the path and date fields, then you will use the group operator to create a new _id and a new 'hits' field to get the keep the count using the sum operator. You should add to this pipeline a sum operator creating a new hits result field, "hits": {"$sum":1}}}.

The aggregation MongoDB document reference can be found at:
{yellow}http://docs.mongodb.org/manual/reference/command/aggregate{/yellow}
and the aggregate NodeJS driver method reference can be found at:
{yellow}http://mongodb.github.io/node-mongodb-native/api-generated/collection.html#aggregate{/yellow}
