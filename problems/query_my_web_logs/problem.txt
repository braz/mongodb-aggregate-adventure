Write a program that connects to a locally running MongoDB MongoD server and prints the result of a pipeline that processes a stream of documents through a number of stages.

You will load all the records from the 'apache-log-example.json' file which is included in the module's data folder or you can find it on Github (see ).

This file contains 292 documents with the fields 'host', 'date', 'path', 'request' and the optional field 'useragent' formatted as follows:
{"host": "210.116.59.164", "date": ISODate("2005-03-13T04:05:47Z"), "path": "/_vti_bin/_vti_aut/fp30reg.dll", "request": "POST /_vti_bin/_vti_aut/fp30reg.dll HTTP/1.1" }
...
{"host": "219.150.244.58", "date": ISODate("17/Mar/2005:11:38:27Z"), "path": "/", "request": "GET / HTTP/1.1", "useragent": "Mozilla/4.0 (compatible; MSIE 5.5; Windows 98)"}

In this problem you will use the aggregation framework to analysis a log file from a webserver. This will use a complex pipeline to create a report with daily and weekly statistics of who visited the websites hosted on the server and what was the most popular content on this server.

In this exercise, you will use the database '{bold}test{/bold}'
running on your localhost (127.0.0.1) in port 27017 and the collection '{bold}logs{/bold}'.

Stage 1 - Connect to the database 'test' and use the collection 'logs'.

Stage 2 - Perform an aggregate operation on the records using the $project, $unwind, $sum, and $sort operators to retrieve the list of "cast" members for these films and return the output of this operation to the console.

Your answer to the exercise will be run against the official solution to ensure
that your query returns the correctly modified document.

This exercise assumes a running MongoDB on your local machine. This means
the connection string will again be {yellow}{bold}'mongodb://127.0.0.1:27017/'{/yellow}{/bold}. You will create the database and collection you will use for this exercise as part of the exercise.

----------------------------------------------------------------------
HINTS:

In this exercise, you will need to use the `aggregation` framework and its operators to return the desired output. In this case you will create a pipeline using a projection on the XXXX field and then apply the unwind operator again on the XXX field in a similar fashion to the very first exercise. 

You should add to this pipeline a sum operator creating a new timesUsed result field, "timesUsed": {"$sum":1}}}, and then sort these with the most frequently used locations appearing first (hint use -1 for the sort).

The aggregation MongoDB document reference can be found at:
{yellow}http://docs.mongodb.org/manual/reference/command/aggregate{/yellow}
and the aggregate NodeJS driver method reference can be found at:
{yellow}http://mongodb.github.io/node-mongodb-native/api-generated/collection.html#aggregate{/yellow}
