Write a program that connects to a locally running MongoDB MongoD server and create a pipeline that processes a stream of documents through a number of stages to create a new collection for pre-aggregated reports.

Using the 'logs_collection' loaded in the 'query my web logs' exercise, please complete this before beginning this exercise.

The documents contain the fields 'host', 'referer', 'page', 'request','useragent', and 'date' formatted as follows:

{ "_id" : ObjectId("52fb7985e774d52c684eeea2"), "HOST" : "209.160.24.63", "REFERER" : "http://www.google.com", "USERAGENT" : "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.46 Safari/536.5", "PAGE" : "product.screen", "DATE" : ISODate("2014-02-03T18:22:16Z") }

In this problem you will use the aggregation framework to analysis a log file from a webserver. You will create two new collections that provide details on the webserver's pages and counts per page at two levels, firstly per hour and then per day.

This will use the aggregation pipeline to create two queries that output to collections respectively, then you will create indexes on these new collections and finally you will query these collections to focus on the time period of the 10th of February 2014, in addition for the hourly collection you will further look at the pages visited between 14:00 and 18:00.

In this exercise, you will use the database '{bold}test{/bold}'
running on your localhost (127.0.0.1) in port 27017 and the collection '{bold}logs{/bold}'.

Stage 1 - Connect to the database 'test' and use the collection 'logs'.

Stage 2 - Using the aggregate command on the 'logs' collection with a pipeline to create a new collection that holds the {bold}daily total number of visits per page per day{/bold}. You should provide the details per page using the $project, $group, and the $out operators on the {yellow}$PAGE{/yellow} field and splitting the $DATE field into new fields holding values for {yellow}$year, $month, and $dayOfMonth{/yellow}. These should by grouped and then summed ($sum) into a new field 'daily' and outputted to new collection with the name 'page_per_day_hits'. The resulting documents should have the format:
{yellow}{ _id: { p: 'PAGENAME', y: 2014, m: 2, d: DD }, daily: XXX }{/yellow}

Stage 3 - Create a compound index on your new collection, 'page_per_day_hits' with the fields "_id.p" and "_id.d".

Stage 4 - Using the aggregate command on the 'logs' collection with a pipeline to create a new collection that holds the {bold}hourly total number of visits per page per hour per day{/bold}. You should provide the details per page using the $project, $group, and the $out operators on the $PAGE field and splitting the $DATE field into new fields holding values for {yellow}$year, $month, $dayOfMonth and $hour{/yellow}. These should by grouped and then summed ($sum) into a new field 'hourly' and outputted to new collection with the name 'page_per_hour_hits'. The resulting documents should have the format:
{yellow}{ _id: { p: 'PAGENAME', y: 2014, m: 2, d: DD, h: HH }, hourly: XXX }{/yellow}

Stage 5 - Create a compound index on your new collection, 'page_per_hour_hits' with the fields "_id.p", "_id.d" and "_id.h".

Stage 6 - Query the collection 'page_per_day_hits' for the page "cart.do" on 10th of February 2014 and sort the results by day ascending (sort({"_id.d": 1})). Output the result of the query to the console.

Stage 7 - Query the collection 'page_per_hour_hits' for the page "cart.do" on 10th of February 2014 between the hours of 14 and 18 (hint: use a $gte and $lte range) and sort the results by day ascending (sort({"_id.d": 1})). Output the result of the query to the console.

Your answer to the exercise will be run against the official solution to ensure
that your query returns the correctly modified document.

This exercise assumes a running MongoDB on your local machine. This means
the connection string will again be {yellow}{bold}'mongodb://127.0.0.1:27017/'{/yellow}{/bold}. You will create the database and collection you will use for this exercise as part of the exercise.

----------------------------------------------------------------------
HINTS:

Just a side note about the zero offset in the default Javascript Date() constructor for the month, so your call should use Date(2014,01,03) for February (rather than 2!).

In this exercise, you will need to use the `aggregation` framework and its operators to return the desired output. In this case you will create a pipeline using a project on the page and time fields with a sub-document on the time field, then you will use the group operator to create a new _id and a new 'daily' or 'hourly' field to get the keep the count using the sum operator. You should add to this pipeline a sum operator creating a new 'daily' or 'hourly' result field, for daily similar to '"hourly": {"$sum":1}'. The final stage of the pipeline will use the '$out' operator to create a new collection.

The aggregation MongoDB document reference can be found at:
{yellow}http://docs.mongodb.org/manual/reference/command/aggregate{/yellow}
and the aggregate NodeJS driver method reference can be found at:
{yellow}http://mongodb.github.io/node-mongodb-native/api-generated/collection.html#aggregate{/yellow}
